#!/usr/bin/env node

const
spawn = require('child_process').spawn,
db = require('../lib/db.js'),
path = require('path');

var fileName = process.argv.pop();

if (!/\.sqlite$/.test(fileName)) {
  process.stderr.write('usage: import_sqlite <filename>\n');
  process.exit(1);
}

db.connect(function(err) {
  if (err) {
    process.stderr.write('couldn\'t connect to mysql database: ' + err + "\n");
    process.exit(1);
  }

  // let's parse the filename to determine host and room
  var m = /^(.*)_##_#(.*)\.sqlite$/.exec(path.basename(fileName));
  if (!m) {
    process.stderr.write('couldn\'t parse out host and room from filename: ' +
                         fileName + "\n");
    process.exit(1);
  }

  var host = m[1], room = m[2];

  db.addRoom(host, room, function(err) {
    if (err) {
      process.stderr.write("can't create database table for room: " + err + "\n");
      process.exit(1);
    }

    var p = spawn('sqlite3', [ '-csv', '-noheader', fileName, 'SELECT * FROM utterances' ]);
    var buf = "";
    p.stdout.on('data', function(d) {
      buf += d;
    });
    
    p.on('exit', function(code, signal) {
      var outstanding = 0;

      // now parse out the buffer
      buf.split('\n').forEach(function(row) {
        if (!(row.trim().length)) return;

        outstanding++;
        // peel off the timestamp
        var x = row.indexOf(',');
        var ts = new Date(parseInt(row.substr(0, x)) * 1000);
        row = row.substr(x+1);
        x = row.indexOf(',');
        var who = row.substr(0,x);
        row = row.substr(x+1);
        var utterance = /^"?(.*?)"?$/.exec(row)[1].replace(/""/g, '"');
        var obj = {
          host: host,
          room: room,
          utterance: utterance,
          date: ts,
          who: who
        };

        // add it!
        db.logMessage(obj, function(err) {
          if (err) {
            process.stderr.write('error writing row: ' + err + "\n");
            process.stderr.write(JSON.stringify(obj, null, 4) + '\n');
          }
          
          if (--outstanding === 0) db.close();
        });
      });
      if (!outstanding) db.close();
    });
  });
});
